#. TRANSLATORS: def JPMarc.DataField.subfields(field, code \\ :all)
#: lib/jpmarc/data_field.ex:17 
msgid ""
"Returns a list of SubFields with `code` in `field`, [] when it doesn't exist\n"
"\n"
"`code` is either of :all, code as String or List of code.\n"
"Default is `:all`.\n"
msgstr ""
#. TRANSLATORS: def JPMarc.DataField.subfield_value(field, code \\ :all, joiner \\ " ")
#: lib/jpmarc/data_field.ex:36 
msgid ""
"Returns a Subfield value with `code` in `field`, `\"\"` when it doesn't exist\n"
"\n"
"`code` is either of :all, code as String or List of code.\n"
"Default is `:all`.\n"
msgstr ""
#. TRANSLATORS: Elixir.JPMarc.DataField Summary
#: lib/jpmarc/data_field.ex:2 
msgid ""
"Tools for working with JPMARC DataFields\n"
msgstr ""
#. TRANSLATORS: def JPMarc.DataField.to_marc(field)
#: lib/jpmarc/data_field.ex:47 
msgid ""
"Return the MARC Format of the data field\n"
msgstr ""
#. TRANSLATORS: @type t
#: lib/jpmarc/data_field.ex:9 
msgid ""
"    Type that represents `JPMarc.DataField` struct.\n"
"\n"
"    This is constructed with `:tag` as String, `:ind1` as String, `:ind2` as String and `:subfields` as List of `JPMarc.SubField.t`\n"
msgstr ""
