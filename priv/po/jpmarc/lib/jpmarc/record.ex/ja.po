msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2017-02-17 16:50+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.11\n"

#. TRANSLATORS: def JPMarc.Record.field_values(record, tag, code \\ :all, ind1 \\ nil, ind2 \\ nil, joiner \\ " ")
#: lib/jpmarc/record.ex:92
msgid ""
"Returns a list of SubFields value with `tag`, `ind1`, `ind2` and `code` in "
"`record`, `[]` when it doesn't exist\n"
"\n"
"`code` is either of :all, `code` as String or List of `code`.\n"
"Default is `:all`.\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`のサブフィールドのリ"
"ストを返します。存在しない場合は`[]`を返します。\n"
"\n"
"`code`には、`:all`,、`code`、`code`のリストを指定できます。`:all`はすべての"
"コードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが抽出"
"の対象となります。\n"
"デフォルトは`:all`です。\n"
"\n"

#. TRANSLATORS: def JPMarc.Record.subfield(record, tag, code \\ :all, ind1 \\ nil, ind2 \\ nil)
#: lib/jpmarc/record.ex:83
msgid ""
"Returns first SubField with `tag`, `ind1`, `ind2` and `code` in `record`, [] "
"when it doesn't exist\n"
"\n"
"`code` is either of :all, `code` as String or List of `code`.\n"
"Default is `:all`.\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`のサブフィールドのリ"
"ストを返します。存在しない場合は`[]`を返します。\n"
"\n"
"`code`には、`:all`、`code`、`code`のリストを指定できます。`:all`はすべての"
"コードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが抽出"
"の対象となります。\n"
"デフォルトは`:all`です。\n"
"\n"

#. TRANSLATORS: @type t
#: lib/jpmarc/record.ex:17
msgid ""
"    Type that represents `JPMarc.Record` struct\n"
"\n"
"    This is constructed with `:leader` as `JPMarc.Leader.t`, `:fiels` as "
"List of `JPMarc.ControlField.t` or `JPMarc.DataField.t`\n"
msgstr ""
"`JPMarc.Record`構造体の型です。\n"
"\n"
"`JPMarc.Leader.t`の`:leader`、`JPMarc.ControlField.t`または`JPMarc.DataField."
"t`のリストである`:fields`で構成されます。\n"

#. TRANSLATORS: Elixir.JPMarc.Record Summary
#: lib/jpmarc/record.ex:2
msgid "  Tools for working with JPMARC Record\n"
msgstr "JPMARCレコードを扱うツールです。\n"

#. TRANSLATORS: def JPMarc.Record.fields(record, tag, ind1 \\ nil, ind2 \\ nil)
#: lib/jpmarc/record.ex:32
msgid ""
"Returns a list of Fields with `tag`, `ind1` and `ind2` in `record`, [] when "
"it doesn't exist\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドのリストを返します。存在しな"
"い場合は`[]`を返します。\n"

#. TRANSLATORS: def JPMarc.Record.to_json(record)
#: lib/jpmarc/record.ex:193
msgid "Return a json representing of the record\n"
msgstr "レコードのJSON形式の文字列を返します。\n"

#. TRANSLATORS: def JPMarc.Record.subfield_value(record, tag, code \\ :all, ind1 \\ nil, ind2 \\ nil, joiner \\ " ")
#: lib/jpmarc/record.ex:127
msgid ""
"Returns first SubFields value with `tag`, `ind1`, `ind2` and `code` in "
"`record`, `nil` when it doesn't exist\n"
"\n"
"`code` is either of :all, `code` as String or List of `code`.\n"
"Default is `:all`.\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`の最初のサブフィール"
"ドの値を返します。存在しない場合は`nil`を返します。\n"
"\n"
"`code`には、`:all`、`code`、`code`のリストを指定できます。`:all`はすべての"
"コードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが抽出"
"の対象となります。\n"
"デフォルトは`:all`です。\n"

#. TRANSLATORS: def JPMarc.Record.from_marc(marc)
#: lib/jpmarc/record.ex:136
msgid "  Decode the String of a marc and return `JPMarc.Record` struct\n"
msgstr "MAC形式の文字列を解析してJPMarc.Record構造体を返します。\n"

#. TRANSLATORS: def JPMarc.Record.to_marc(record)
#: lib/jpmarc/record.ex:154
msgid "  Return the MARC Format of the JPMarc struct\n"
msgstr "JPMarc.Record構造体をMARC形式で返します。\n"

#. TRANSLATORS: def JPMarc.Record.subfield_values(record, tag, code \\ :all, ind1 \\ nil, ind2 \\ nil, joiner \\ " ")
#: lib/jpmarc/record.ex:116
msgid ""
"Returns a list of SubFields value with `tag`, `ind1`, `ind2` and `code` in "
"`record`, `[]`when it doesn't exist\n"
"\n"
"`code` is either of :all, `code` as String or List of `code`.\n"
"Default is `:all`.\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`のサブフィールドのリ"
"ストを返します。存在しない場合は`[]`を返します。\n"
"\n"
"`code`には、`:all`,、`code`、`code`のリストを指定できます。`:all`はすべての"
"コードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが抽出"
"の対象となります。\n"
"デフォルトは`:all`です。\n"

#. TRANSLATORS: def JPMarc.Record.field(record, tag, ind1 \\ nil, ind2 \\ nil)
#: lib/jpmarc/record.ex:51
msgid ""
"Returns first DataFields with `tag`, `ind1` and `ind2` in `record`, nil when "
"it doesn't exist\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`の最初のデータフィールドを返します。存在しない"
"場合は`nil`を返します。\n"

#. TRANSLATORS: def JPMarc.Record.control_field?(tag)
#: lib/jpmarc/record.ex:26
msgid ""
"Return `true` if `tag` is a valid tag number as ControlField, otherwise "
"`false`\n"
msgstr ""
"`tag`がコントロールフィールドのTAG番号の場合は`true`を、そうでない場合は"
"`false`を返します。\n"

#. TRANSLATORS: def JPMarc.Record.sort(record)
#: lib/jpmarc/record.ex:231
msgid "  Sort its fields by tag and subfields of field\n"
msgstr "フィールドをタグ順、インジケータ順にソートします。\n"

#. TRANSLATORS: def JPMarc.Record.to_text(record)
#: lib/jpmarc/record.ex:179
msgid "Return the Text Format of the JPMarc struct\n"
msgstr "JPMarc.Record構造体をテキスト形式で返します。\n"

#. TRANSLATORS: def JPMarc.Record.from_json(json)
#: lib/jpmarc/record.ex:201
msgid "Construct a record from json formatted in the marc-in-json schema\n"
msgstr "Marc-in-json形式のjson文字列からJPMarc.Record構造体を作成します。\n"

#. TRANSLATORS: def JPMarc.Record.field_value(record, tag, code \\ :all, ind1 \\ nil, ind2 \\ nil, joiner \\ " ")
#: lib/jpmarc/record.ex:107
msgid ""
"Returns a list of Field values with `tag`, `ind1`, `ind2` and `code` in "
"`record`, `nil` when it doesn't exist\n"
"\n"
"`code` is either of :all, `code` as String or List of `code`.\n"
"Default is `:all`.\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`のサブフィールドのリ"
"ストを返します。存在しない場合は`[]`を返します。\n"
"\n"
"`code`には、`:all`,、`code`、`code`のリストを指定できます。`:all`はすべての"
"コードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが抽出"
"の対象となります。\n"
"デフォルトは`:all`です。\n"

#. TRANSLATORS: def JPMarc.Record.to_xml(record)
#: lib/jpmarc/record.ex:164
msgid "Return the MARCXML Format of the JPMarc struct\n"
msgstr "JPMarc.Record構造体をMARCXML形式で返します。\n"

#. TRANSLATORS: def JPMarc.Record.subfields(record, tag, code \\ :all, ind1 \\ nil, ind2 \\ nil)
#: lib/jpmarc/record.ex:57
msgid ""
"Returns a list of SubFields with `tag`, `ind1`, `ind2` and `code` in "
"`record`, [] when it doesn't exist\n"
"\n"
"`code` is either of :all, `code` as String or List of `code`.\n"
"Default is `:all`.\n"
msgstr ""
"`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`のサブフィールドのリ"
"ストを返します。存在しない場合は`[]`を返します。\n"
"\n"
"`code`には、`:all`,、`code`、`code`のリストを指定できます。`:all`はすべての"
"コードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが抽出"
"の対象となります。\n"
"デフォルトは`:all`です。\n"

#~ msgid ""
#~ "Returns a list of SubFields value with `tag`, `ind1`, `ind2` and `code` "
#~ "in `record`, `[]` when it doesn't exist\n"
#~ "\n"
#~ "`code` is either of :all, `code` as String or List of `code`\n"
#~ msgstr ""
#~ "`record`の`tag`、`ind1`、`ind2`のデータフィールドの`code`のサブフィールド"
#~ "のリストを返します。存在しない場合は`[]`を返します。\n"
#~ "\n"
#~ "`code`には、`:all`,、`code`、`code`のリストを指定できます。`:all`はすべて"
#~ "のコードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが"
#~ "抽出の対象となります。\n"
#~ "デフォルトは`:all`です。\n"

#~ msgid ""
#~ "Returns first SubFields value with `tag`, `ind1`, `ind2` and `code` in "
#~ "`record`, [] when it doesn't exist\n"
#~ "\n"
#~ "`code` is either of one `code` as String or List of `code`\n"
#~ msgstr ""
#~ "`record`中の`tag`、`ind1`、`ind2`のデータフィールドの`code`の最初のサブ"
#~ "フィールドの値を返します。存在しない場合は`nil`を返します。\n"
#~ "\n"
#~ "`code`には、`:all`,、`code`、`code`のリストを指定できます。`:all`はすべて"
#~ "のコードが、`code`はそのコードが、`code`のリストはリストに含まれるコードが"
#~ "抽出の対象となります。\n"
